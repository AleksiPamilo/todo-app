{"version":3,"file":"static/js/754.e58bbc5b.chunk.js","mappings":"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","sources":["components/Todo.tsx","sites/LandingPage.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport ITodo from \"../types/Todo\";\n\ntype TodoProps = {\n    todo: ITodo;\n    todos: ITodo[];\n    setTodos: React.Dispatch<React.SetStateAction<ITodo[]>>\n};\n\nconst Todo: React.FC<TodoProps> = ({ todo, todos, setTodos }) => {\n    const [title, setTitle] = useState<string>(todo.title);\n    const [editable, setEditable] = useState<boolean>(false);\n    const inputStyle = \"py-2 px-3 border bg-black focus:shadow-glow-2 disabled:bg-black disabled:border-0\";\n\n    const deleteTodo = (id: string) => {\n        const updatedTodos = todos.filter((todo) => todo.id !== id);\n        setTodos(updatedTodos);\n        localStorage.setItem(\"todos\", JSON.stringify(updatedTodos));\n    }\n\n    const handleCompletion = (id: string) => {\n        const updatedTodos = todos.map((todo) => {\n            if (todo.id === id) {\n                todo.completed = !todo.completed;\n            }\n\n            return todo;\n        });\n\n        setTodos(updatedTodos);\n        localStorage.setItem(\"todos\", JSON.stringify(updatedTodos));\n    }\n\n    return (\n        <div key={todo.id} className=\"flex gap-4 items-center p-4 border hover:shadow-glow-5\">\n            <input type=\"checkbox\" className=\"w-5 h-5\" checked={todo.completed} onClick={() => handleCompletion(todo.id)} />\n            <input disabled={!!!editable} className={inputStyle} value={title} onChange={(e) => setTitle(String(e.target.value))} />\n            <p>{todo.description}</p>\n\n            <div>\n                <button onClick={() => setEditable(!editable)} className=\"py-2 px-3 border hover:shadow-glow-2\">Edit</button>\n                <button onClick={() => deleteTodo(todo.id)} className=\"py-2 px-3 border hover:shadow-glow-2\">Delete</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todo;\n","import React, { useState, useEffect } from \"react\";\nimport Todo from \"../components/Todo\";\nimport ITodo from \"../types/Todo\";\n\nconst LandingPage: React.FC = () => {\n    const [todos, setTodos] = useState<ITodo[]>([]);\n    const [title, setTitle] = useState<string>(\"\");\n\n    useEffect(() => {\n        const todos = localStorage.getItem(\"todos\");\n        if (todos) {\n            setTodos(JSON.parse(todos));\n        }\n    }, []);\n\n    const addTodo = () => {\n        const todo: ITodo = {\n            id: new Date().toISOString(),\n            title: title,\n            description: null,\n            completed: false\n        }\n\n        setTodos([...todos, todo]);\n        localStorage.setItem(\"todos\", JSON.stringify([...todos, todo]));\n    }\n\n    return (\n        <div className=\"w-screen h-screen flex flex-col items-center justify-center gap-5\">\n            <div className=\"\">\n                <input type=\"text\" className=\"py-2 px-3 border bg-black focus:shadow-glow-2\" value={title} onChange={(e) => setTitle(e.target.value)} />\n                <button className=\"py-2 px-3 border hover:shadow-glow-2\" onClick={addTodo}>Add</button>\n            </div>\n            <div className=\"max-h-[35rem] flex flex-col gap-4 items-center overflow-y-scroll\">\n                {todos.map((todo) => (\n                    <Todo key={todo.id} todo={todo} todos={todos} setTodos={setTodos} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default LandingPage;\n"],"names":["_ref","todo","todos","setTodos","_useState","useState","title","_useState2","_slicedToArray","setTitle","_useState3","_useState4","editable","setEditable","_jsxs","className","children","_jsx","type","checked","completed","onClick","id","updatedTodos","map","localStorage","setItem","JSON","stringify","handleCompletion","disabled","value","onChange","e","String","target","description","filter","deleteTodo","useEffect","getItem","parse","Date","toISOString","concat","_toConsumableArray","Todo"],"sourceRoot":""}